#define F_CPU 4000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <string.h>
#include <avr/interrupt.h>
#include <stdbool.h>
#include "rpm.h"
#include "RTC.h"
#include "TMP36gz.h"
#include "adc.h"

#define USART_BAUDRATE(BAUD_RATE) ((float)(64 * F_CPU / (16 * (float)BAUD_RATE)) + 0.5)
#define CMD_MAX_SIZE 15

static void USART_init(void);
static void USART_sendChar(char c);
static void USART_sendString(const char* str);
static uint8_t USART_read(void);
static void executeCommand(const char* command);
void menu_status(const char* command);
void menu_manual(const char* command);
void menu_auto(const char* command);
void PWM();
void RuntimeStartup();


uint16_t temperaturC(uint16_t temp, uint8_t tempScale);
int level = 0;
int fan_lvl = 0;
static FILE USART_stream = FDEV_SETUP_STREAM(USART_sendChar, NULL, _FDEV_SETUP_WRITE);

int main(void)
{ 

    USART_init();
    RuntimeStartup();
    readRPM_init();
	PORTE.DIRSET = 0b00000011; 
	const int maxVal = 15; // Maximum length for input
	char command[CMD_MAX_SIZE] = {0};
	
	uint8_t index = 0;
	void PWM();
	_delay_ms(10);
	executeCommand(command);
	while (1)
	{
		const char c = (char) USART_read();

		if (c != '\r' && c != '\n')
		{
			if (index < maxVal)
			{
				command[index++] = c;
			}
			else
			{
				USART_sendString("Input too long\r\n");
				index = 0;
			}
		}

		if (c == '\n')
		{
			command[index] = '\0';
			index = 0;
			executeCommand(command);
		} 
	}
}

static void USART_init(void)
{
	PORTB.DIRCLR = PIN1_bm;
	PORTB.DIRSET = PIN0_bm;
	USART3.BAUD = (uint16_t)USART_BAUDRATE(9600);
	USART3.CTRLB |= USART_TXEN_bm | USART_RXEN_bm;
	stdout = &USART_stream;
}

static void USART_sendChar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
	{
		;
	}

	USART3.TXDATAL = c;
}

static void USART_sendString(const char* str)
{
	for (size_t i = 0; i < strlen(str); i++)
	{
		USART_sendChar(str[i]);
	}
}

static uint8_t USART_read(void)
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
	{
		;
	}

	return USART3.RXDATAL;
		}
 

static void executeCommand(const char* command){
		
		// level 0: main menu
		// level 1: submenu 1
		// level 2: submenu 2
		// level 3: submenu 3
		switch (level)
		{
			default: // main menu
			USART_sendString("Welcome to the main menu, you can choose to enter the STATUS, MANUAL and AUTOMATIC submenus\r\n");

                if (strcmp(command, "s") == !1)
                    {
                    level = 1; // switch to submenu 1
                    USART_sendString("Entering status submenu...\r\n");
                }
                else if (strcmp(command, "m") == !1)
                {
                    level = 2;
                    // switch to submenu 2
                    USART_sendString("Entering manual submenu...\r\n");
                }
                else if (strcmp(command, "a") == !1)
                {
                    level = 3;
                    // switch to submenu 3
                    USART_sendString("Entering automatic submenu...\r\n");
                }
                else
                {
                    USART_sendString("Invalid command\r\n");
                }
                break;

			case 1: // STATUS submenu
			if (level == 1) {
				printf("choose Fan 0->7 with <FANn>. <resetn> to to reset runtime.");
				menu_status(command);
				
                break;
            }
			case 2: //submenu 2 / MANUAL
			if (level == 2) {
				USART_sendString("Welcome to the manual control submenu, here you can choose manually the strength of the fan using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
                menu_manual(command);	
			}
			break;
			
			case 3: //submenu 3 / AUTOMATIC
			if (level == 3) {
				USART_sendString("Welcome to the automatic control submenu, here you can choose to make the fans to go automatically by using the: AUTOMATIC command and BACK if you want back to the main menu\r\n");
				menu_auto(command);
			}
			break;
	}
}

void menu_status(const char* command) {
    if (strcmp(command, "FAN0") == 0){
					uint8_t x = get_runtime_fan(0);
					uint8_t y = read_fantemperature(0);
                    uint8_t z = readfanspeed(0);
                    USART_sendString("\n");
                    USART_sendString("Fan0:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
				}
				else if(strcmp(command, "FAN1") == 0){
					uint8_t x = get_runtime_fan(1);
					uint8_t y = read_fantemperature(1);
                    uint8_t z = readfanspeed(1);
					USART_sendString("\n");
                    USART_sendString("Fan1:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
				}
				
				else if(strcmp(command, "FAN2") == 0){
					uint8_t x = get_runtime_fan(2);
					uint8_t y = read_fantemperature(2);
                    uint8_t z = readfanspeed(2);
					USART_sendString("\n");
                    USART_sendString("Fan2:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
				}
				
				else if(strcmp(command, "FAN3") == 0){
					uint8_t x = get_runtime_fan(3);
					uint8_t y = read_fantemperature(3);
                    uint8_t z = readfanspeed(3);
					USART_sendString("\n");
                    USART_sendString("Fan3:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
				}
				
				else if(strcmp(command, "FAN4") == 0){
					uint8_t x = get_runtime_fan(4);
					uint8_t y = read_fantemperature(4);
                    uint8_t z = readfanspeed(4);
					USART_sendString("\n");
                    USART_sendString("Fan4:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
				}
				else if(strcmp(command, "FAN5") == 0 ){
					uint32_t x = get_runtime_fan(5);
					uint32_t y = read_fantemperature(5);
                    uint32_t z = readfanspeed(5);
					USART_sendString("\n");
                    USART_sendString("Fan5:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
				}
				else if(strcmp(command, "FAN6") == 0 ){
					uint8_t x = get_runtime_fan(6);
					uint8_t y = read_fantemperature(6);
					USART_sendString("\n");
                    USART_sendString("Fan6:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
					
				}
				else if(strcmp(command, "FAN7") == 0 ){
					uint8_t x = get_runtime_fan(7);
					uint8_t y = read_fantemperature(7);
					USART_sendString("\n");
                    USART_sendString("Fan7:");
                    USART_sendString("\n");
					printf("RUNTIME: %u\n", x);
					printf("TEMPERATURE: %u\n", y);
                    printf("RPM: %u\n", x);
					
				}
				else if(strcmp(command, "Reset0") == 0 ){
					reset_fan_runtime(0);
					printf("Fan 0 runtime reset\r\n");

				}
				else if(strcmp(command, "Reset1") == 0){
					reset_fan_runtime(1);
					printf("Fan 1 runtime reset\r\n");
				}
				else if (strcmp(command, "Reset2") == 0){
					reset_fan_runtime(2);
					printf("Fan 2 runtime reset\r\n");
				}
				else if (strcmp(command, "Reset3") == 0){
					reset_fan_runtime(3);
					printf("Fan 3 runtime reset\r\n");
				}
				else if(strcmp(command, "Reset4") == 0){
					reset_fan_runtime(4);
					printf("Fan 4 runtime reset\r\n");
				}
				else if (strcmp(command, "Reset5") == 0){
					reset_fan_runtime(5);
					printf("Fan 5 runtime reset\r\n");
				}
				else if (strcmp(command, "Reset6") == 0){
					reset_fan_runtime(6);
					printf("Fan 6 runtime reset\r\n");
				}
				else if (strcmp(command, "Reset7") == 0){
					reset_fan_runtime(7);
					printf("Fan 7 runtime reset\r\n");
				}
				else if (strcmp(command, "BACK") == 0)
				{
					level = 0; // go back to main menu
					USART_sendString("Returning to Main Menu...\r\n");
				}
				else
				{
				USART_sendString("Invalid command\r\n");
				}
}

void menu_manual(const char* command){
    PWM();
    switch(fan_lvl){
		default: 
		printf("Choose which fan you want to control, commando FAN0 -> 5");
		if (strcmp(command, "FAN0") == 0) {
			printf("Choose manually the strength of fan 0 using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
			fan_lvl = 1;
		}
		else if (strcmp(command, "FAN1") == 0) {
			printf("Choose manually the strength of fan 1 using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
			fan_lvl = 2;
		}
		else if (strcmp(command, "FAN2") == 0) {
			printf("Choose manually the strength of fan 2 using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
			fan_lvl = 3;
		}
		else if (strcmp(command, "FAN3") == 0) {
			printf("Choose manually the strength of fan 3 using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
			fan_lvl = 4;
		}
		else if (strcmp(command, "FAN4") == 0) {
			printf("Choose manually the strength of fan 4 using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
			fan_lvl = 5;
		}
		else if (strcmp(command, "FAN5") == 0) {
			printf("Choose manually the strength of fan 5 using the following commands:  HIGH, MEDIUM, LOW and BACK if you want back to the main menu\r\n");
			fan_lvl = 6;
		}
		else
		{
			USART_sendString("Invalid command\r\n");
		}
		case 1: 
		if (fan_lvl == 1) {
			if (strcmp(command, "HIGH") == 0) {
				TCA0.SINGLE.CMP2 = 0x9F; // Duty cycle på PD2
				USART_sendString("Fan 0 Power HIGH\r\n");	
			}
			else if (strcmp(command, "MEDIUM") == 0) {
				TCA0.SINGLE.CMP2 = 0x9F/4; // Duty cycle på PD2
				USART_sendString("Fan 0 Power MEDIUM\r\n");
			}
			else if (strcmp(command, "LOW") == 0) {
				TCA0.SINGLE.CMP2 = 0x9F/8; // Duty cycle på PD2
				USART_sendString("Fan 0 Power LOW\r\n");
			}
            else if (strcmp(command, "BACK") == 0) {
                fan_lvl = 0;
       			USART_sendString("Choose which fan you want to control, commando FAN0 -> 5");
            }
			else
			{
				USART_sendString("Invalid command\r\n");
			}
        }
		break;
		
		case 2:
		if (fan_lvl == 2) {
			if (strcmp(command, "HIGH") == 0) {
				TCA0.SINGLE.CMP1 = 0x9F; // Duty cycle på PD2
				USART_sendString("Fan 1 Power HIGH\r\n");
			}
			else if (strcmp(command, "MEDIUM") == 0) {
				TCA0.SINGLE.CMP1 = 0x9F/8; // Duty cycle på PD2
				USART_sendString("Fan 1 Power MEDIUM\r\n");
			}
			else if (strcmp(command, "LOW") == 0) {
				TCA0.SINGLE.CMP1 = 0x9F/20; // Duty cycle på PD2
				USART_sendString("Fan 1 Power LOW\r\n");
			}
            else if (strcmp(command, "BACK") == 0) {
                fan_lvl = 0;
       			USART_sendString("Choose which fan you want to control, commando FAN0 -> 5");

            }
			else 
			{
				USART_sendString("Invalid command\r\n");
			}
        }
		break;
		
		case 3:
		if (fan_lvl == 3) {
			if (strcmp(command, "HIGH") == 0) {
				TCA0.SINGLE.CMP0 = 0x9F; // Duty cycle på PD2
				USART_sendString("Fan 2 Power HIGH\r\n");
			}
			else if (strcmp(command, "MEDIUM") == 0) {
				TCA0.SINGLE.CMP0 = 0x9F/8; // Duty cycle på PD2
				USART_sendString("Fan 2 Power MEDIUM\r\n");
			}
			else if (strcmp(command, "LOW") == 0) {
				TCA0.SINGLE.CMP0 = 0x9F/20; // Duty cycle på PD2
				USART_sendString("Fan 2 Power LOW\r\n");
			}
            else if (strcmp(command, "BACK") == 0) {
                fan_lvl = 0;
       			USART_sendString("Choose which fan you want to control, commando FAN0 -> 5");
            }
			else
			{
				USART_sendString("Invalid command\r\n");
			}
        }
		break;
        
		
		case 4:
		if (fan_lvl == 4) {
			if (strcmp(command, "HIGH") == 0) {
				TCA1.SINGLE.CMP0BUF = 0x9F; // Duty cycle på PD2
				USART_sendString("Fan 3 Power HIGH\r\n");
			}
			else if (strcmp(command, "MEDIUM") == 0) {
				TCA0.SINGLE.CMP0BUF = 0x9F/8; // Duty cycle på PD2
				USART_sendString("Fan 3 Power MEDIUM\r\n");
			}
			else if (strcmp(command, "LOW") == 0) {
				TCA0.SINGLE.CMP0BUF = 0x9F/20; // Duty cycle på PD2
				USART_sendString("Fan 3 Power LOW\r\n");
			}
            else if (strcmp(command, "BACK") == 0) {
                fan_lvl = 0;
       			USART_sendString("Choose which fan you want to control, commando FAN0 -> 5");
            }
			else
			{
				USART_sendString("Invalid command\r\n");
			}
        }
		break;
		
		case 5:
		if (fan_lvl == 5) {
			if (strcmp(command, "HIGH") == 0) {
				TCA1.SINGLE.CMP1BUF = 0x9F; // Duty cycle på PD2
				USART_sendString("Fan 4 Power HIGH\r\n");
			}
			else if (strcmp(command, "MEDIUM") == 0) {
				TCA0.SINGLE.CMP1BUF = 0x9F/8; // Duty cycle på PD2
				USART_sendString("Fan 4 Power MEDIUM\r\n");
			}
			else if (strcmp(command, "LOW") == 0) {
				TCA0.SINGLE.CMP1BUF = 0x9F/20; // Duty cycle på PD2
				USART_sendString("Fan 4 Power LOW\r\n");
			}
            else if (strcmp(command, "BACK") == 0) {
                fan_lvl = 0;
       			USART_sendString("Choose which fan you want to control, commando FAN0 -> 5");
            }
			else
			{
				USART_sendString("Invalid command\r\n");
			}
        }
		break;
		
		case 6:
		if (fan_lvl == 6) {
			if (strcmp(command, "HIGH") == 0) {
				TCA1.SINGLE.CMP2BUF = 0x9F; // Duty cycle på PD2
				USART_sendString("Fan 5 Power HIGH\r\n");
			}
			else if (strcmp(command, "MEDIUM") == 0) {
				TCA0.SINGLE.CMP2BUF = 0x9F/8; // Duty cycle på PD2
				USART_sendString("Fan 5 Power MEDIUM\r\n");
			}
			else if (strcmp(command, "LOW") == 0) {
				TCA0.SINGLE.CMP2BUF = 0x9F/20; // Duty cycle på PD2
				USART_sendString("Fan 5 Power LOW\r\n");
			}
            else if (strcmp(command, "BACK") == 0) {
                fan_lvl = 0;
       			USART_sendString("Choose which fan you want to control, commando FAN0 -> 5");
            }
			else
			{
				USART_sendString("Invalid command\r\n");
			}
        }
            break;
    
}
}

void menu_auto(const char* command){
    if(strcmp(command, "AUTOMATIC") == 0){ 					
        USART_sendString("Fan is now going automatically");
	}
    
	else if (strcmp(command, "BACK") == 0) {
		level = 0; // go back to main menu
		USART_sendString("Returning to Main Menu...\r\n");
		}
    else {
		USART_sendString("Invalid command\r\n");
	}
}


 

void PWM(){
    //Velger pin out
    PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm; // Setter PD0, PD1 og PD2 som utganger
    PORTC.DIRSET = PIN6_bm | PIN5_bm | PIN4_bm;// Setter PC6, PC5 og PC4 som utganger
    PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc | PORTMUX_TCA1_PORTC_gc; // Slår på PWM-output på Port D og C
    TCA0.SINGLE.PER = 0x9F;
    TCA1.SINGLE.PER = 0x9F;
    
    
    TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; // Eneblaer output på PWM pin 2 på Port D og PWM pin 0 og 1 på Port D, setter timeren i singelslope mode
    TCA1.SINGLE.CTRLB = TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
    //Formel: F_CPU/(TCA_SINGLE_CLKSEL_DIVn_gc*(TCA0.SINGLE.PER + 1)) = PWM frekvens
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc | TCA_SINGLE_ENABLE_bm; // Slår på timeren med pre-scaler satt til 1
	TCA1.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc | TCA_SINGLE_ENABLE_bm;// Slår på timeren med pre-scaler satt til 1
	
}

void RuntimeStartup(){
    RTC_init(); //Starts counter
    fan_memory();   //reads stored fan runtime from eeprom
    sei();  //enables interrupts 
}
